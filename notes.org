* Things we want to cover

** Theoretical side

*** Notion of greatest fixed point
    Least fixed points are inductive definitions: the smallest set preserved
    ("forwards") under its defining rules. This means that it is the set such that
    applying the premises of each rule to something already in the set gives you back
    something (via the conclusion of the rule) still in the set.

    Dually, greatest fixed points are coinductive definitions: the biggest set
    preserved ("backwards") under its rules. It is the set such that if the
    conclusion is satisfied for something in the set, then the premises are also in
    the set.

    Conceptually, inductive types are things that have justification to be true, and
    coinductive types are things that don't have justification to be false.

*** Coinductive reasoning principle: based on Tarski's principle
    One theoretical basis for coinduction is based on lattice theory.

    The Knaster-Tarski theorem states that the greatest fixed point of F is the join
    of all X such that X <= F(X), and that the least fixed point of F is the meet of
    all X such that F(X) <= X. Intuitively this corresponds to the "preserved
    forwards" and "preserved backwards" ideas above.

    A simple corollary gives us that if F(X) <= X, then \mu. F <= X. This is
    induction, and the standard induction principle on natural numbers can be derived
    from it. The coinduction principle is that if X <= F(X), then X <= \nu. F. Then
    to show that some object is in a coinductive set or property, it suffices to show
    that it is in some X such that X <= F(X).

    X can be thought of as the "coinductive hypothesis". After applying F to X, X is
    available for use to show F(X). Often one starts off with X equal to what one
    wants to prove, but then must "strengthen" the coinductive hypothesis by making
    it bigger. Using this approach in a proof assistant means restarting the proof
    each time X is strengthened.

*** Reasoning up-to
    Only for bisimulations? Introduce bisimulation first?

    Definition, sound closure, respectful class, yadi yada

*** Parameterized coinduction

*** Generalized parameterized coinduction

** Coq side

*** Reduction rules, frob

    Fix, cofix, match: governed by iota rules. For cofix, dual to the one of
    fix: a fix reduces when its arguments are known; a cofix reduces when it is
    patterned matched on.
    Intuitively: a cofix can always provide more constructors to the environment,
    to avoid diverging, we only reduce as long as the context knows what to do
    with these constructors.
    Hence the [frob] trick.

*** Subject reduction is broken

    CoInductive tick := Tick : tick -> tick.
    CoFixpoint loop := Tick loop.
    Definition etaeq : loop = loop :=
    match loop with
    | Tick t â‡’ eq_refl (Tick t) |
    end.
    Definition BOOM := Eval compute in (etaeq : loop = loop).
    https://www.xn--pdrot-bsa.fr/slides/rapido-06-15.pdf

    I don't think this compiles in the current version of Coq, I put a version that
    does in sts.v

*** Positive, negative

    The problem lies with using positive coinductive types. Conceptually inductive
    types are defined with constructors and coinductive types are defined with
    destructors, however both are defined using constructors when using positive
    coinductive types. This allows for dependent pattern matching on coinductive
    types, the cause of the issue above. Instead, if we only allow for negative
    coinductive types using records and primitive projections (which make record
    projection first-class terms, and disallow pattern matching on records), we
    retain subject reduction.

*** Guardedness

    Oppositely to recursive ones, there is no decreasing argument in a co-recursive
    definition. To be admissible, a method of construction must provide at least one
    extra constructor of the infinite object for each iteration. A syntactical guard
    condition is imposed on co-recursive definitions in order to ensure this: each
    recursive call in the definition must be protected by at least one constructor,
    and only by constructors.

    "One cannot chain coinductive lemmas in proofs.
    Everything must be done in one go."

    Since this guardedness condition is syntactic, coinductive proofs are not
    properly compositional. If a proof uses another lemma in it, Coq must check that
    all corecursive calls are syntactically guarded, by checking the proof of the
    other lemma. This requires all coinductive lemmas you want to use to be made
    transparent (Defined instead of Qed).

*** paco
    Paco provides a semantic notion of guardedness, which allows for compositional
    reasoning. It also supports incremental reasoning, which practically allows for
    effective use of automation in coinductive proofs.

    paco F r = \nu. fun x -> F(r \/ x)

    r is the currenty accmulated knowledge in the proof so far. At the beginning of
    the proof, we have no knowledge so far.

    paco F \bot = \nu F

    We can unfold the paco definition:

    paco F r = F (r \/ paco F r)

    And most importantly, we can accumulate information during the proof:

    x \in paco F r <=> x \in paco F (r \/ x)

*** gpaco

** Examples

*** Finite automaton -> infinite properties

*** Infinite state machine -> infinite object

*** Streams

*** ITrees

*** Pi-calculus?

** Resources

*** Corecursion and coinduction: what they are and how they relate to recursion and induction
    https://pdfs.semanticscholar.org/41fb/876f6b35971173ef1808472350b51cf3afd1.pdf

*** A Tutorial on Co-induction and Functional Programming
    http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.8.7706&rep=rep1&type=pdf

*** An introduction to (co)algebra and (co)induction
    https://homepages.cwi.nl/~janr/papers/files-of-papers/2011_Jacobs_Rutten_new.pdf

*** Co-induction in relational semantics
    https://www.sciencedirect.com/science/article/pii/030439759190033X

*** On Streams and Coinduction
    https://homepages.cwi.nl/~janr/papers/files-of-papers/CRM.pdf

*** An Introduction to Coinduction (hritcu)
    https://prosecco.gforge.inria.fr/personal/hritcu/dyn/coind/CoindStart.html

*** Coinductive (Adam)
    http://adam.chlipala.net/cpdt/html/Coinductive.html#approx

*** Relevant git issues

    https://github.com/coq/coq/issues/6768
    https://github.com/coq/coq/pull/10764
    https://github.com/coq/coq/pull/7536

** Presentation

*** Intro about bisimulation, infinite behaviours

*** Greatest fixed points, coinduction

*** Coinduction in Coq, cofix, guardedness.

*** Subject reduction, negative/positive coinductive types

*** Coinductive predicates, bisimulation vs eq, proofs
    State machine eg.
    Guarded command

*** Issues with compositionality, automation
    paco also introduces incrementality (but more in the theoretical setting, not Coq
    cofix)

*** paco
    Defns
    Rules
    egs.

*** eutt
    Need for tau

*** Available information

*** Up-to reasoning

*** gpaco
